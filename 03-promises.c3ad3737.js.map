{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAWC,SAASC,cAAc,kBAClCC,EAAUF,SAASC,cAAc,iBACjCE,EAAYH,SAASC,cAAc,mBA6BzC,SAASG,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,WACLH,EACFF,EAAQ,CAAEH,WAAUC,UAEpBG,EAAO,CAAEJ,WAAUC,S,GAEpBA,E,IApCPP,EAASe,aAAa,MAAO,GAC7BZ,EAAQY,aAAa,MAAO,GAC5BX,EAAUW,aAAa,MAAO,GAEdd,SAASC,cAAc,aAC/Bc,iBAAiB,UAAU,SAAAC,GACjCA,EAAIC,iBAGJ,IADA,IAAIC,EAAQC,OAAOpB,EAASqB,OACnBC,EAAI,EAAGA,GAAKF,OAAOhB,EAAUiB,OAAQC,GAAK,EACjDjB,EAAciB,EAAGH,GACdI,MAAK,SAAAC,G,IAAGlB,EAAQkB,EAARlB,SAAUC,EAAKiB,EAALjB,MACjBkB,EAAA3B,GAAS4B,OAAOC,QACd,uBAAwCC,OAAftB,EAAS,QAAYsB,OAANrB,EAAM,M,IAIjDsB,OAAM,SAAAL,G,IAAGlB,EAAQkB,EAARlB,SAAUC,EAAKiB,EAALjB,MAClBkB,EAAA3B,GAAS4B,OAAOI,QACd,sBAAuCF,OAAftB,EAAS,QAAYsB,OAANrB,EAAM,M,IAInDY,GAASC,OAAOjB,EAAQkB,M","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst delayRef = document.querySelector('[name=\"delay\"]');\nconst stepRef = document.querySelector('[name=\"step\"]');\nconst amountRef = document.querySelector('[name=\"amount\"]');\n\ndelayRef.setAttribute('min', 0);\nstepRef.setAttribute('min', 0);\namountRef.setAttribute('min', 0);\n\nconst formRef = document.querySelector('form.form');\nformRef.addEventListener('submit', evt => {\n  evt.preventDefault();\n\n  let delay = Number(delayRef.value);\n  for (let i = 1; i <= Number(amountRef.value); i += 1) {\n    createPromise(i, delay)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n        //console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n        //console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n    delay += Number(stepRef.value);\n  }\n});\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$iU1Pc","parcelRequire","$ce04d3a99e08e73b$var$delayRef","document","querySelector","$ce04d3a99e08e73b$var$stepRef","$ce04d3a99e08e73b$var$amountRef","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","setAttribute","addEventListener","evt","preventDefault","delay1","Number","value","i","then","param","$parcel$interopDefault","Notify","success","concat","catch","failure"],"version":3,"file":"03-promises.c3ad3737.js.map"}